//creates a tree, puts the data into the tree in a fairly balanced way
//and displays the tree's size and the data in the tree by performing an inorder
//traversal 


class Main
{
	public Main()
	{
		super();
	}

	public void main()
	{
		//create the tree
		TreeNode root = new TreeNode("root");
		for (int i = 0; i != 10; i = i + 1)
		{
			root.add("item " ++ i);
		}

		//print the tree's size and contents
		print(root.size() ++ "\n\n");
		root.printTree();
	}
}

class TreeNode
{
	private TreeNode left = null;
	private TreeNode right = null;
	private String datum = null;

	//used to balance the tree (doesn't work very well, but then that's not
	//the point of this anyway)
	private boolean useLeftNext = true;

	public TreeNode(String s)
	{
		super();
		datum = s;
	}

	//add a String to the tree with this node at its root
	public void add(String s)
	{
		if (left == null)
		{
			left = new TreeNode(s);
			return;
		}

		if (right == null)
		{
			right = new TreeNode(s);
			return;
		}

		if (useLeftNext)
		{
			left.add(s);
			useLeftNext = false;
			return;
		}

		right.add(s);
		useLeftNext = true;
	}

	//print the tree below this node using an inorder traversal
	public void printTree()
	{
		if (left != null)
			left.printTree();

		print(datum ++ "\n");

		if (right != null)
			right.printTree();
	}

	//get the size of the tree with this node at its root
	public int size()
	{
		int left = 0;
		if (this.left != null)
			left = this.left.size();

		int right = 0;
		if (this.right != null)
			right = this.right.size();

		return 1 + left + right;
	}
}